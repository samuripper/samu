README CUDA:

CUDA support is tested under Linux and OSX. Recent Linux distributions (eg.
Ubuntu 12.10) have OpenCL and CUDA drivers included. OSX will support OpenCL
natively but for using CUDA you need to download drivers from nvidia web site.

If your device supports CUDA it very likely also supports OpenCL. The -cuda
build targets will support CUDA only, while the -gpu build targets support
both OpenCL and CUDA (thus the latter is recommended for most users).

If you have problems with JtR CUDA support:
  Please check that paths to yours CUDA library are proper in Makefile:
    CUDAPATH = /usr/local/cuda/lib
    CUDA64PATH = /usr/local/cuda/lib64
  Please check that yours PATH contains cuda lib,bin and include paths.
  Please check that yours LD_LIBRARY_PATH contains cuda lib path

Performance issues:
  If you have got Fermi or newer card change "-arch sm_10" to "-arch sm_20" in
  the NVCC_FLAGS (Makefile). If you have Kepler or newer, you can experiment
  with using "-arch sm_30" as well.

  Default THREADS and BLOCKS settings might not be optimal. For some weaker
  cards, THREADS may even be too high and this will show up as eg. "too many
  resources requested for launch in cryptmd5.cu at line 241".

  To get better performance you can experiment with THREADS and BLOCKS macros
  defined for each format in cuda*.h file.

  For MSCash2[1]:
    CARD NAME	BLOCKS	THREADS	SM	RESULT
    GTX460	14	128	20	14194 c/s
  For WPAPSK[1]:
    CARD NAME	BLOCKS	THREADS	SM	RESULT
    GTX460	14	256	20	15186 c/s
  For PWSAFE[1]:
    CARD NAME	BLOCKS	THREADS SM	RESULT
    GTX460	112	512	10	50746 c/s
  For XSHA512[2]:
    CARD NAME	BLOCKS	THREADS	SM	RESULT
    GTX570	1600	256	??	67385K c/s
  For RAWSHA256[1]:
    CARD NAME   BLOCKS  THREADS SM      RESULT
    GTX570      7680    128     10      27561K c/s


Watchdog Timer:
  If your GPU is also your active display device, the display driver enables a
  watchdog timer by default, killing any kernel that runs for more than about
  five seconds. You will normally not get a proper error message, just some
  kind of failure after five seconds or more. Our goal is to split such kernels
  into subkernels with shorter durations but in the meantime (and especially if
  running slow kernels on weak devices) you might need to disable this
  watchdog. You can check this setting using "--list=cuda-devices":

    CUDA Device #0
        Name:                          GeForce GT 650M
        Compute capability:            sm_30
        Number of stream processors:   384 (2 x 192)
        Clock rate:                    878 Mhz
        Total global memory:           1.0 GB
        Total shared memory per block: 48.0 KB
        Total constant memory:         64.0 KB
        Kernel execution timeout:      No        <-- disabled watchdog
        Concurrent copy and execution: Yes
        Concurrent kernels support:    Yes
        Warp size:                     32

  We are currently not aware of any way to disable this watchdog under OSX. Under
  Linux, you can disable it by adding the 'Option "Interactive"' line to
  /etc/X11/xorg.conf:

    Section "Device"
        Identifier     "Device0"
        Driver         "nvidia"
        VendorName     "NVIDIA Corporation"
        Option         "Interactive"        "False"
    EndSection



You can contact us at
[1] lukas[dot]odzioba[at]gmail[dot]com
[2] qqlddg[at]gmail[dot]com
or john-dev mailing list
or irc #openwall@freenode
